Description: Do not attempt to build vendored pydevd package
 setup.py attempts to build the Cython extensions included in pydevd; since
 we will symlink to the existing pydevd instead, we remove all references to
 pydevd from setup.py.
Forwarded: not-needed
Author: Julian Gilbey <jdg@debian.org>
Last-Update: 2022-08-03

--- a/setup.py
+++ b/setup.py
@@ -23,7 +23,6 @@
 del sys.path[0]
 
 
-PYDEVD_ROOT = debugpy._vendored.project_root("pydevd")
 DEBUGBY_ROOT = os.path.dirname(os.path.abspath(debugpy.__file__))
 
 
@@ -33,22 +32,6 @@
     return None
 
 
-# bdist_wheel determines whether the package is pure or not based on ext_modules.
-# However, all pydevd native modules are prebuilt and packaged as data, so they
-# should not be in the list.
-#
-# The proper way to handle this is by overriding has_ext_modules. However, due to
-# https://bugs.python.org/issue32957, in setuptools 57.0.0 and below, it is not
-# always called when it should be, with ext_modules tested directly instead.
-#
-# So, for non-pure builds, we provide a customized empty list for ext_modules that
-# tests as truthful - this causes the package to be treated as non-pure on all
-# relevant setuptools versions.
-class ExtModules(list):
-    def __bool__(self):
-        return True
-
-
 def override_build(cmds):
     def finalize_options(self):
         # Mark all packages as pure if requested to build a universal wheel.
@@ -146,8 +129,9 @@
         extras["platforms"] = platforms
 
     cmds = versioneer.get_cmdclass()
-    override_build(cmds)
-    override_build_py(cmds)
+    # On Debian, we do not attempt to build pydevd
+    # override_build(cmds)
+    # override_build_py(cmds)
 
     setuptools.setup(
         name="debugpy",
@@ -177,15 +161,6 @@
         ],
         package_dir={"": "src"},
         packages=setuptools.find_namespace_packages(where="src", include=["debugpy*"]),
-        package_data={
-            "debugpy": ["ThirdPartyNotices.txt"],
-            "debugpy._vendored": [
-                # pydevd extensions must be built before this list can be computed properly,
-                # so it is populated in the overridden build_py.finalize_options().
-            ],
-        },
-        ext_modules=ExtModules(),
-        has_ext_modules=lambda: True,
         cmdclass=cmds,
         **extras
     )
